import json
import boto3

# Bedrock client used to interact with APIs around models
bedrock_runtime = boto3.client(
    service_name='bedrock-runtime',
    region_name="us-west-2",
    endpoint_url="https://bedrock-runtime.us-west-2.amazonaws.com",
)

question1 = "During the past 30 days, about how often did you feel nervous? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"
question2 = "During the past 30 days, about how often did you feel hopeless? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"
question3 = "During the past 30 days, about how often did you feel restless or fidgety? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"
question4 = "During the past 30 days, about how often did you feel so depressed that nothing could cheer you up? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"
question5 = "During the past 30 days, about how often did you feel that everything was an effort? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"
question6 = "During the past 30 days, about how often did you feel worthless? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

question_set = [
    question1,
    question2,
    question3,
    question4,
    question5,
    question6
]

def lambda_handler(event, context):
    try:
        print(f"Received event: {event}\nWith context: {context}")

        body = json.loads(event['body'])
        print(f"BODY: {body} {type(body)}")
        
        response = {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'}
        }

        if "answer" not in body:
            print('Starting Survey on Question 1')
            response_body = {
                'question_id': 1,
                'question': question_set[0]
            }
        else:
            question_id = body.get("question_id")
            print(f'ON QUESTION {question_id}')
            
            answer = body.get("answer")
            follow_up_question = call_bedrock(question_set[question_id - 1], answer)
            
            response_body = {
                'question_id': question_id + 1,
                'question': question_set[question_id] if question_id < len(question_set) else "End of Survey",
                'follow_up_question': follow_up_question
            }

        response['body'] = json.dumps(response_body)
        print(f"RESPONSE: {json.dumps(response)}")
        return response

    except Exception as e:
        print(f"Error: {str(e)}")
        response = {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}),
            'headers': {'Content-Type': 'application/json'}
        }
        return response

def call_bedrock(question, answer):
    prompt = f"""
    You are an AI designed to enhance the credibility of survey responses. Given the respondent's answer to the K6 survey question, you
