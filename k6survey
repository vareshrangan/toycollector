import json
import boto3

# Bedrock client used to interact with APIs around models
bedrock_runtime = boto3.client(
    service_name='bedrock-runtime',
    region_name="us-west-2",
    endpoint_url="https://bedrock-runtime.us-west-2.amazonaws.com",
)

question1 = "During the past 30 days, about how often did you feel nervous? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

question2 = "During the past 30 days, about how often did you feel hopeless? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"


question3 = "During the past 30 days, about how often did you feel restless or fidgety? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

question4 = "During the past 30 days, about how often did you feel so depressed that nothing could cheer you up? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

question5 = "During the past 30 days, about how often did you feel that everything was an effort? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

question6 = "During the past 30 days, about how often did you feel worthless? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

# question7 = "Taking all the feelings mentioned above together, did these feelings occur more often than usual, about the same as usual, or less often than usual in the past 30 days? 1: A lot more often than usual 2: Some more often than usual 3: A little more often than usual 4: About the same as usual 5: A little less often than usual 6: Some less often than usual 7: A lot less often than usual"

# question8 = "During the past 30 days, how many days out of 30 were you totally unable to work or carry out your normal activities because of these feelings? (Number of days)"

# question9 = "Not counting the days you reported in response to Q8, how many days in the past 30 were you able to do only half or less of what you would normally have been able to do, because of these feelings? 1: (Number of days)"

# question10 = "During the past 30 days, how many times did you see a doctor or other health professional about these feelings? (Number of times)"

# question11 = "During the past 30 days, how often have physical health problems been the main cause of these feelings? 1: All of the time 2: Most of the time 3: Some of the time 4: A little of the time 5: None of the time"

question_set = [
    question1,
    question2,
    question3,
    question4,
    question5,
    question6
]

def lambda_handler(event, context):
    print(f"Received event:{event}\nWith context:{context}")

    body = json.loads(event['body'])
    print(f"BODY: {body} {type(body)}")
    
    response = {'statusCode': 200}

    if "answer" not in body:
        print('Starting Survey on Question 1')
        response['question_id'] = 1
        response['question'] = question_set[0]
    else:
        question_id = body.get("question_id")
        print(f'ON  QUESTION {question_id}')
        
        answer = body.get("answer")
        follow_up_question = call_bedrock(question_set[question_id - 1], answer)
        
        response['question_id'] = question_id + 1
        response['question'] = question_set[question_id - 1]
        response['follow_up_question'] = follow_up_question
        
    print(f"RESPONSE: {json.dumps(response)}")
    return json.dumps(response)
        


def call_bedrock(question, answer):
    prompt = """
    You are an AI designed to enhance the credibility of survey responses. Given the respondent's answer to the K6 survey question, your task is to generate one relevant follow-up question to verify the respondent's answer and gather more detailed information.
    Here is the K6 question: {question}.
    Here is the respondent's answer: {answer}.
    Do not generate the respondent's answer or give any other context, just provide one follow up question.
    The generated question needs to be multiple choice questions with 5 potential answers.
    """
    body = json.dumps({
        "prompt": f"<s>[INST]{prompt}[/INST]",
        "max_tokens": 400,
        "top_k": 50,
        "top_p": .7,
        "temperature": .7,
    })

    print(f"Bedrock Request Body: f{body}")
    
    modelId = 'mistral.mistral-7b-instruct-v0:2'
    accept = 'application/json'
    contentType = 'application/json'

    response = bedrock_runtime.invoke_model(body=body, modelId=modelId, accept=accept, contentType=contentType)
    print(f"BEDROCK RESPONSE: {response}")

    response_content = response['body'].read().decode('utf-8')
    response_body = json.loads(response_content)
    response_text = response_body.get('outputs')[0].get('text')
    
    print(f"RESPONSE TEXT: {response_text}")
    return response_text
